<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtScheduleMapper">
    <select id="list" resultType="io.metersphere.dto.ScheduleDao">
        select schedule.* from schedule
        <where>
            <if test="request.group != null">
                and schedule.group = #{request.group}
            </if>
            <if test="request.workspaceId != null">
                and schedule.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.enable != null">
                and schedule.enable = #{request.enable}
            </if>
            <if test="request.filters != null and request.filters.size() > 0">
                <foreach collection="request.filters.entrySet()" index="key" item="values">
                    <if test="values != null and values.size() > 0">
                        <choose>
                            <when test="key=='type'">
                                and schedule.group in
                                <foreach collection="values" item="value" separator="," open="(" close=")">
                                    #{value}
                                </foreach>
                            </when>
                        </choose>
                    </if>
                </foreach>
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="countTaskByProjectId" resultType="java.lang.Long">
        SELECT COUNT(id) AS countNumber FROM `schedule` WHERE resource_id IN (
            SELECT id FROM api_test WHERE project_id = #{0,jdbcType=VARCHAR}
            UNION
            SELECT id FROM api_scenario WHERE project_id = #{0,jdbcType=VARCHAR}
            )
    </select>
    <select id="countTaskByProjectIdAndCreateTimeRange" resultType="java.lang.Long">
        SELECT COUNT(id) AS countNumber FROM `schedule`
        WHERE resource_id IN (
            SELECT id FROM api_test WHERE project_id = #{projectId,jdbcType=VARCHAR}
            UNION
            SELECT id FROM api_scenario WHERE project_id = #{projectId,jdbcType=VARCHAR}
        )
        AND create_time BETWEEN #{startTime} and #{endTime}
    </select>
    <select id="findRunningTaskInfoByProjectID" resultType="io.metersphere.api.dto.datacount.response.TaskInfoResult">
        SELECT apiTest.`name` AS scenario,sch.id AS taskID,sch.`value` AS rule,sch.`enable` AS `taskStatus`,u.`name` AS creator,sch.update_time AS updateTime
        FROM api_test apiTest
        INNER JOIN `schedule` sch ON apiTest.id = sch.resource_id
        INNER JOIN `user` u ON u.id = sch.user_id
        WHERE sch.`enable` = true AND apiTest.project_id = #{0,jdbcType=VARCHAR}
        UNION
        SELECT apiScene.`name` AS scenario,sch.id AS taskID,sch.`value` AS rule,sch.`enable` AS `taskStatus`,u.`name` AS creator,sch.update_time AS updateTime
        FROM api_scenario apiScene
                 INNER JOIN `schedule` sch ON apiScene.id = sch.resource_id
                 INNER JOIN `user` u ON u.id = sch.user_id
        WHERE sch.`enable` = true AND apiScene.project_id = #{0,jdbcType=VARCHAR}
    </select>
</mapper>