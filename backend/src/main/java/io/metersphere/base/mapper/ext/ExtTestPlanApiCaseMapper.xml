<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtTestPlanApiCaseMapper">


  <insert id="insertIfNotExists" parameterType="io.metersphere.base.domain.TestPlanApiCase">
    -- 查询没有数据再插入
    INSERT INTO test_plan_api_case(id, test_plan_id, api_case_id, environment_id, create_time, update_time)
    SELECT #{request.id}, #{request.testPlanId}, #{request.apiCaseId}, #{request.environmentId}, #{request.createTime}, #{request.updateTime}
      FROM DUAL
      WHERE NOT EXISTS(
        SELECT id FROM
        test_plan_api_case
        WHERE test_plan_id = #{request.testPlanId} and api_case_id = #{request.apiCaseId}
      )
  </insert>

  <select id="list" resultType="io.metersphere.api.dto.definition.TestPlanApiCaseDTO">
    select
      t.id, t.environment_id, t.create_time, t.update_time,
      c.id as case_id, c.project_id, c.name, c.api_definition_id, c.priority, c.description, c.create_user_id, c.update_user_id,
      a.module_id, a.path, a.protocol, ader.status execResult
    from
      test_plan_api_case t
    inner join
      api_test_case c
    on t.api_case_id = c.id
      <if test="request.planId != null and request.planId!=''">
        and t.test_plan_id = #{request.planId}
      </if>
    inner join
      api_definition a
    on
      c.api_definition_id = a.id
    left join (
      select
        e.status, e.id, e.resource_id
      from
        api_definition_exec_result e
      left join (
        select
          max(start_time) start_time , resource_id
        from
          api_definition_exec_result
        group by
          resource_id
      ) as b
      on e.resource_id = b.resource_id
      where
        e.start_time = b.start_time and e.type = 'API_PLAN'
    ) as ader
    on t.id = ader.resource_id
    <if test="request.protocol != null and request.protocol!=''">
      and a.protocol = #{request.protocol}
    </if>
    <choose>
      <when test="request.status == 'Trash'">
        and a.status = 'Trash'
      </when>
      <otherwise>
        and a.status != 'Trash'
      </otherwise>
    </choose>
    where 1
    <if test="request.ids != null and request.ids.size() > 0">
      <if test="request.projectId != null and request.projectId!=''">
        and
      </if>
      t.id in
      <foreach collection="request.ids" item="caseId" separator="," open="(" close=")">
        #{caseId}
      </foreach>
    </if>
    <if test="request.name != null and request.name!=''">
      and c.name like CONCAT('%', #{request.name},'%')
    </if>
    <if test="request.moduleIds != null and request.moduleIds.size() > 0">
      and a.module_id in
      <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
        #{nodeId}
      </foreach>
    </if>
    <if test="request.filters != null and request.filters.size() > 0">
      <foreach collection="request.filters.entrySet()" index="key" item="values">
        <if test="values != null and values.size() > 0">
          <choose>
            <when test="key == 'priority'">
              and c.priority in
              <foreach collection="values" item="value" separator="," open="(" close=")">
                #{value}
              </foreach>
            </when>
          </choose>
        </if>
      </foreach>
    </if>
    <if test="request.orders != null and request.orders.size() > 0">
      order by
      <foreach collection="request.orders" separator="," item="order">
        <choose>
          <when test="order.name == 'update_time'">
            t.${order.name} ${order.type}
          </when>
          <otherwise>
            ${order.name} ${order.type}
          </otherwise>
        </choose>
      </foreach>
    </if>
  </select>

</mapper>