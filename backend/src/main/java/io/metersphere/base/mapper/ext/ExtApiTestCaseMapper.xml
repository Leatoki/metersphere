<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.metersphere.base.mapper.ext.ExtApiTestCaseMapper">
    <resultMap id="BaseResultMap" type="io.metersphere.base.domain.ApiTestCase">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="project_id" jdbcType="VARCHAR" property="projectId"/>
        <result column="api_definition_id" jdbcType="VARCHAR" property="apiDefinitionId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="priority" jdbcType="VARCHAR" property="priority"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="create_user_id" jdbcType="VARCHAR" property="createUserId"/>
        <result column="update_user_id" jdbcType="VARCHAR" property="updateUserId"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.metersphere.base.domain.ApiTestCase">
        <result column="request" jdbcType="LONGVARCHAR" property="request"/>
        <result column="response" jdbcType="LONGVARCHAR" property="response"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, project_id, name,api_definition_id,priority,description, create_user_id, update_user_id, create_time, update_time
  </sql>
    <sql id="Blob_Column_List">
    request
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="io.metersphere.base.domain.ApiTestCaseExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from api_test_case
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <select id="list" resultType="io.metersphere.api.dto.definition.ApiTestCaseResult">
        select
            atc.id,
            atc.project_id,
            atc.name,
            atc.priority,
            atc.api_definition_id,
            u1.name as createUser ,
            u2.name as updateUser,
            atc.description,
            atc.request,
            atc.response,
            atc.create_user_id,
            atc.create_time,
            atc.update_user_id,
            atc.update_time,
            ader.status execResult,
            ader.create_time execTime
        from
          api_test_case atc
        left join user u1 on
          atc.create_user_id = u1.id
        left join user u2 on
          atc.update_user_id = u2.id
        left join (
            select
              max(create_time) create_time ,status ,id, resource_id
            from
              api_definition_exec_result
            group by
              resource_id) as ader
        on atc.id = ader.resource_id
        <where>
            <if test="request.name != null and request.name!=''">
                and atc.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.id != null and request.id!=''">
                AND atc.id = #{request.id}
            </if>
            <if test="request.priority != null and request.priority!=''">
                AND atc.priority = #{request.priority}
            </if>
            <if test="request.projectId != null and request.projectId!=''">
                AND atc.project_id = #{request.projectId}
            </if>
            <if test="request.apiDefinitionId != null and request.apiDefinitionId!=''">
                AND atc.api_definition_id = #{request.apiDefinitionId}
            </if>
        </where>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                atc.${order.name} ${order.type}
            </foreach>
        </if>
    </select>

    <select id="listSimple" resultType="io.metersphere.api.dto.definition.ApiTestCaseDTO">
        select
          c.id, c.project_id, c.name, c.api_definition_id, c.priority, c.description, c.create_user_id, c.update_user_id, c.create_time, c.update_time,
          a.module_id, a.path, a.protocol
        from
          api_test_case c
        inner join
          api_definition a
        on
          c.api_definition_id = a.id
            <if test="request.protocol != null and request.protocol!=''">
                and a.protocol = #{request.protocol}
            </if>
            <choose>
                <when test="request.status == 'Trash'">
                    and a.status = 'Trash'
                </when>
                <otherwise>
                    and a.status != 'Trash'
                </otherwise>
            </choose>
        where
        <if test="request.projectId != null and request.projectId!=''">
            c.project_id = #{request.projectId}
        </if>
        <if test="request.ids != null and request.ids.size() > 0">
            <if test="request.projectId != null and request.projectId!=''">
                and
            </if>
            c.id in
            <foreach collection="request.ids" item="caseId" separator="," open="(" close=")">
                #{caseId}
            </foreach>
        </if>
        <if test="request.name != null and request.name!=''">
            and c.name like CONCAT('%', #{request.name},'%')
        </if>
        <if test="request.moduleIds != null and request.moduleIds.size() > 0">
            and a.module_id in
            <foreach collection="request.moduleIds" item="nodeId" separator="," open="(" close=")">
                #{nodeId}
            </foreach>
        </if>
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key == 'priority'">
                            and c.priority in
                            <foreach collection="values" item="value" separator="," open="(" close=")">
                                #{value}
                            </foreach>
                        </when>
                    </choose>
                </if>
            </foreach>
        </if>
        <if test="request.orders != null and request.orders.size() > 0">
            order by
            <foreach collection="request.orders" separator="," item="order">
                ${order.name} ${order.type}
            </foreach>
        </if>
    </select>
    <select id="selectIdsNotExistsInPlan" resultType="java.lang.String">
        select c.id
        from api_test_case c
        where c.project_id = #{projectId} and c.id not in (
          select pc.api_case_id
          from test_plan_api_case pc
          where pc.test_plan_id = #{planId}
        )
    </select>

    <select id="countProtocolByProjectID" resultType="io.metersphere.api.dto.datacount.ApiDataCountResult">
        SELECT apiDef.protocol AS groupField,COUNT(testCase.id) AS countNumber FROM api_test_case testCase
        INNER JOIN  api_definition apiDef ON testCase.api_definition_id = apiDef.id
        WHERE testCase.project_id = #{0}
        GROUP BY apiDef.protocol
    </select>

    <select id="countByProjectIDAndCreateInThisWeek" resultType="java.lang.Long">
        SELECT count(testCase.id) AS countNumber FROM api_test_case testCase
        INNER JOIN  api_definition apiDef ON testCase.api_definition_id = apiDef.id
        WHERE testCase.project_id = #{projectId}
        AND testCase.create_time BETWEEN #{firstDayTimestamp} AND #{lastDayTimestamp}
    </select>


</mapper>